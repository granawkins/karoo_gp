{
    "node_type": "operator",
    "tree_type": "f",
    "parent": null,
    "children": "[<Node: NodeData(label='sqrt', node_type='operator', arity=1, min_depth=1, child_type=None)>, <Node: NodeData(label='+', node_type='operator', arity=2, min_depth=1, child_type=None)>]",
    "repr": "<Node: NodeData(label='/', node_type='operator', arity=2, min_depth=1, child_type=None)>",
    "parse": "((sqrt(sqrt(((2)/(b))+(square(3)))))/((((square(1))>((2)**(1)))if((square(3))**((3)**(2)))else((abs(a))*((2)*(c))))+((((2)>=(a))if((3)**(c))else(abs(2)))**(((2)*(1))*(square(b))))))",
    "display": "     ________________________/_____                         \n   sqr                 ___________+_____________            \n   sqr        ________if________            ___**_______    \n    +___   __>_     __**     __*_       ___if_____     *___ \n  /__ squsqu  **_ squ  **_ abs  *__   >=_   **_ abs  *__ squ\n 2  b  3  1  2  1  3  3  2  a  2  c  2  a  3  c  2  2  1  b \n",
    "depth": 5,
    "height": 0,
    "n_children": 44,
    "n_cols": 20,
    "second_child": "(sqrt(((2)/(b))+(square(3))))",
    "set_child": "((sqrt((a)+(b)))/((((square(1))>((2)**(1)))if((square(3))**((3)**(2)))else((abs(a))*((2)*(c))))+((((2)>=(a))if((3)**(c))else(abs(2)))**(((2)*(1))*(square(b))))))",
    "prune": "((1)/(a))"
}
